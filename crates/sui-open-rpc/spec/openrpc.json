{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with Sui Full node.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "0.14.0"
  },
  "methods": [
    {
      "name": "sui_batchTransaction",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned batched transaction.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "single_transaction_params",
          "description": "list of transaction request parameters",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RPCTransactionRequestParams"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      },
      "examples": [
        {
          "name": "Create unsigned batch transaction data.",
          "params": [
            {
              "name": "signer",
              "value": "sui1nvrczhcyf9lzupwj9jkr4grpgy9jpp5vccv32nzz58rph6vsyutsnsa67g"
            },
            {
              "name": "single_transaction_params",
              "value": [
                {
                  "moveCallRequestParams": {
                    "packageObjectId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "module": "devnet_nft",
                    "function": "mint",
                    "typeArguments": [],
                    "arguments": [
                      "Example NFT",
                      "An NFT created by the Sui Command Line Tool",
                      "ipfs://bafkreibngqhl3gaa7daob4i2vccziay2jjlp435cf66vhono7nrvww53ty"
                    ]
                  }
                },
                {
                  "transferObjectRequestParams": {
                    "recipient": "sui1kf9castgleyfdadhpn93pud8qhsxr58algvfvxxj3vx5fml0jt9sazg9k6",
                    "objectId": "sui1vuhsm0sjnu0rjyflnaskf63gvludan8nc0z33u2xm624fuply75qrfzp0w"
                  }
                }
              ]
            },
            {
              "name": "gas",
              "value": "sui17394s8erygkppyttz73kndx6qwwswk2jkkqrdu48k4s5gevjgq7qexx803"
            },
            {
              "name": "gas_budget",
              "value": 1000
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "txBytes": "VHJhbnNhY3Rpb25EYXRhOjoBAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgEAAAAAAAAAID1bEYXznnHvNX4r2eE5YlFrCkFAMnZDeyXw/76JfPR2CmRldm5ldF9uZnQEbWludAADAAtFeGFtcGxlIE5GVAArQW4gTkZUIGNyZWF0ZWQgYnkgdGhlIFN1aSBDb21tYW5kIExpbmUgVG9vbABCaXBmczovL2JhZmtyZWlibmdxaGwzZ2FhN2Rhb2I0aTJ2Y2N6aWF5MmpqbHA0MzVjZjY2dmhvbm83bnJ2d3c1M3R5ALJLjsFo/kiW9bcMyxDxpwXgYdD9+hiWGNKLDUTv75LLZy8NvhKfHjkRP59hZOooZ/jezPPDxRjxRt6VVPA/J6gBAAAAAAAAACDAd36dJG/zl0rF8bNQqhbELqDXEXswyMhDbOepJUsw0psHgV8ESX4uBdIsrDqgYUELIIaMxhkVTEKhxhvpkCcX9EtYHyMiLBCRaxejabTaA50HWVK1gDbyp7VhRGWSQDwBAAAAAAAAACBT5FZ8yvpfNs6EyAqovJvmTg1a55aIQnSu8wBa5nM4CQEAAAAAAAAA6AMAAAAAAAA=",
              "gas": {
                "objectId": "sui17394s8erygkppyttz73kndx6qwwswk2jkkqrdu48k4s5gevjgq7qexx803",
                "version": 1,
                "digest": "U+RWfMr6XzbOhMgKqLyb5k4NWueWiEJ0rvMAWuZzOAk="
              },
              "inputObjects": [
                {
                  "MovePackage": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa"
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "sui1vuhsm0sjnu0rjyflnaskf63gvludan8nc0z33u2xm624fuply75qrfzp0w",
                    "version": 1,
                    "digest": "wHd+nSRv85dKxfGzUKoWxC6g1xF7MMjIQ2znqSVLMNI="
                  }
                },
                {
                  "ImmOrOwnedMoveObject": {
                    "objectId": "sui17394s8erygkppyttz73kndx6qwwswk2jkkqrdu48k4s5gevjgq7qexx803",
                    "version": 1,
                    "digest": "U+RWfMr6XzbOhMgKqLyb5k4NWueWiEJ0rvMAWuZzOAk="
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "sui_dryRunTransaction",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "params": [
        {
          "name": "tx_bytes",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "sig_scheme",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SignatureScheme"
          }
        },
        {
          "name": "signature",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "pub_key",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionEffects",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionEffects"
        }
      }
    },
    {
      "name": "sui_executeTransaction",
      "tags": [
        {
          "name": "APIs to execute transactions."
        }
      ],
      "description": "Execute the transaction and wait for results if desired. Request types: 1. ImmediateReturn: immediately returns a response to client without waiting     for any execution results.  Note the transaction may fail without being     noticed by client in this mode. After getting the response, the client     may poll the node to check the result of the transaction. 2. WaitForTxCert: waits for TransactionCertificate and then return to client. 3. WaitForEffectsCert: waits for TransactionEffectsCert and then return to client.     This mode is a proxy for transaction finality. 4. WaitForLocalExecution: waits for TransactionEffectsCert and make sure the node     executed the transaction locally before returning the client. The local execution     makes sure this node is aware of this transaction when client fires subsequent queries.     However if the node fails to execute the transaction locally in a timely manner,     a bool type in the response is set to false to indicated the case.",
      "params": [
        {
          "name": "tx_bytes",
          "description": "transaction data bytes, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "sig_scheme",
          "description": "Flag of the signature scheme that is used.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SignatureScheme"
          }
        },
        {
          "name": "signature",
          "description": "transaction signature, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "pub_key",
          "description": "signer's public key, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Base64"
          }
        },
        {
          "name": "request_type",
          "description": "The request type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ExecuteTransactionRequestType"
          }
        }
      ],
      "result": {
        "name": "SuiExecuteTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiExecuteTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Execute an object transfer transaction",
          "params": [
            {
              "name": "tx_bytes",
              "value": "VHJhbnNhY3Rpb25EYXRhOjoAAOGTufiN5KmUNYyfhWE1I2w+dakl4cd6w0EnyLrvvqCTnxUkcStNN6AgsozdMhOK400i5jl686mnHk76H7rRbLACAAAAAAAAACCW0jCHoP1kHpHg4A32wBLN7Z75ul5b8EJGS1ymSIuJfNDIwOV8i/O5OBDebboCpEiOvueFaqSYG1nmhy/U2xTQz6/eWyiEhY6D+kFGw05NXKj399+qCDscEa9LhE/5Sz8CAAAAAAAAACC+9uNrUY2jrUxYVvpoZGRSSodrRj0Sl2A1aMQOgU2dUwEAAAAAAAAA6AMAAAAAAAA="
            },
            {
              "name": "sig_scheme",
              "value": "ED25519"
            },
            {
              "name": "signature",
              "value": "x63RhDAbisTRoD1is7zFgWvZeq4GxcCEHmPJWpkfCe4eRc0lSU/Ajm9cYVkIITQlvUAVZmw7qruIfPHOKXFiDA=="
            },
            {
              "name": "pub_key",
              "value": "ZHp41kh9rbBrnN+8n+1bRnALIsIG3k+DJq0n1iZL+9g="
            },
            {
              "name": "request_type",
              "value": "WaitForLocalExecution"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "certificate": {
                "transactionDigest": "gcyd9RwXNhG7KLh7DHHVPNXpYAxLoJPbTPD5w0w8QAg=",
                "data": {
                  "transactions": [
                    {
                      "TransferObject": {
                        "recipient": "sui1uxfmn7yduj5egdvvn7zkzdfrdsl8t2f9u8rh4s6pylyt4ma75zfsuk78pw",
                        "objectRef": {
                          "objectId": "sui1nu2jguftf5m6qg9j3nwnyyu2udxj9e3e0te6nfc7fmaplwk3djcqvt3jf2",
                          "version": 2,
                          "digest": "ltIwh6D9ZB6R4OAN9sASze2e+bpeW/BCRktcpkiLiXw="
                        }
                      }
                    }
                  ],
                  "sender": "sui16ryvpetu30emjwqsmekm5q4yfz8taeu9d2jfsx6eu6rjl4xmzngqmr2len",
                  "gasPayment": {
                    "objectId": "sui1e7haukegsjzcaql6g9rvxnjdtj500a7l4gyrk8q34a9cgnlefvls24hwxn",
                    "version": 2,
                    "digest": "vvbja1GNo61MWFb6aGRkUkqHa0Y9EpdgNWjEDoFNnVM="
                  },
                  "gasBudget": 1000
                },
                "txSignature": "AMet0YQwG4rE0aA9YrO8xYFr2XquBsXAhB5jyVqZHwnuHkXNJUlPwI5vXGFZCCE0Jb1AFWZsO6q7iHzxzilxYgxkenjWSH2tsGuc37yf7VtGcAsiwgbeT4MmrSfWJkv72A==",
                "authSignInfo": {
                  "epoch": 0,
                  "signature": "",
                  "signers_map": [
                    58,
                    48,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ]
                }
              },
              "effects": {
                "status": {
                  "status": "success"
                },
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "AFsuF/APwLyOftPyq1nWB7DjWGvaHNpOQrQUWyb6Neo=",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "sui16ryvpetu30emjwqsmekm5q4yfz8taeu9d2jfsx6eu6rjl4xmzngqmr2len"
                    },
                    "reference": {
                      "objectId": "sui1e7haukegsjzcaql6g9rvxnjdtj500a7l4gyrk8q34a9cgnlefvls24hwxn",
                      "version": 2,
                      "digest": "vvbja1GNo61MWFb6aGRkUkqHa0Y9EpdgNWjEDoFNnVM="
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "sui1uxfmn7yduj5egdvvn7zkzdfrdsl8t2f9u8rh4s6pylyt4ma75zfsuk78pw"
                    },
                    "reference": {
                      "objectId": "sui1nu2jguftf5m6qg9j3nwnyyu2udxj9e3e0te6nfc7fmaplwk3djcqvt3jf2",
                      "version": 2,
                      "digest": "ltIwh6D9ZB6R4OAN9sASze2e+bpeW/BCRktcpkiLiXw="
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "sui16ryvpetu30emjwqsmekm5q4yfz8taeu9d2jfsx6eu6rjl4xmzngqmr2len"
                  },
                  "reference": {
                    "objectId": "sui1e7haukegsjzcaql6g9rvxnjdtj500a7l4gyrk8q34a9cgnlefvls24hwxn",
                    "version": 2,
                    "digest": "vvbja1GNo61MWFb6aGRkUkqHa0Y9EpdgNWjEDoFNnVM="
                  }
                },
                "events": [
                  {
                    "transferObject": {
                      "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                      "transactionModule": "native",
                      "sender": "sui16ryvpetu30emjwqsmekm5q4yfz8taeu9d2jfsx6eu6rjl4xmzngqmr2len",
                      "recipient": {
                        "AddressOwner": "sui1uxfmn7yduj5egdvvn7zkzdfrdsl8t2f9u8rh4s6pylyt4ma75zfsuk78pw"
                      },
                      "objectType": "0x2::example::Object",
                      "objectId": "sui1nu2jguftf5m6qg9j3nwnyyu2udxj9e3e0te6nfc7fmaplwk3djcqvt3jf2",
                      "version": 2
                    }
                  }
                ]
              },
              "timestamp_ms": null,
              "parsed_data": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_getCommitteeInfo",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return the committee information for the asked epoch",
      "params": [
        {
          "name": "epoch",
          "description": "The epoch of interest. If None, default to the latest epoch",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "CommitteeInfoResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CommitteeInfoResponse"
        }
      }
    },
    {
      "name": "sui_getEventsByModule",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted in a specified Move module",
      "params": [
        {
          "name": "package",
          "description": "the Move package ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the module name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted in a specified Move module",
          "params": [
            {
              "name": "package",
              "value": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa"
            },
            {
              "name": "module",
              "value": "devnet_nft"
            },
            {
              "name": "count",
              "value": 5
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "mMWJb4CLpB3UdxdW9YaGuorVIkgAYt4L9hF2v4SMSII=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui1jap0wpedtcscl9nl5zwa8qg4z8xuhhh6dhj8ljhdug4gmzyyrlms0w0szf",
                    "recipient": {
                      "AddressOwner": "sui1dpnle333vynfchqvwwczy22gdwa07vvjp80ms2vua5acvzgr0xtshsh976"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui1fxcfcwlmqvdv55l8mhcahfsmkc8sakge0w3zqddkjv7624rn8x0se0v29l",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByMoveEventStructName",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events with the given move event struct name",
      "params": [
        {
          "name": "move_event_struct_name",
          "description": "the event struct name type, e.g. `0x2::devnet_nft::MintNFTEvent` or `0x2::SUI::test_foo<address, vector<u8>>` with type params",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events with the given move event struct name",
          "params": [
            {
              "name": "move_event_struct_name",
              "value": "0x2::devnet_nft::MintNFTEvent"
            },
            {
              "name": "count",
              "value": 5
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "jUSyaZUTi6y7FaGJ1hbW1SgqHwL6XrRgQdnQOZUq0iA=",
                "event": {
                  "moveEvent": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "devnet_nft",
                    "sender": "sui1tqdprxn9wmfm2q44m3ruthjf0dm5u6x2cdm3n2py44a57ete07gsg5xll6",
                    "type": "0x2::devnet_nft::MintNFTEvent",
                    "bcs": ""
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByObject",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given object",
      "params": [
        {
          "name": "object",
          "description": "the object ID",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given object",
          "params": [
            {
              "name": "object",
              "value": "sui12anh2pck7kyy0hvuv63qyj65f3mz8wgmps0hyg60ss0gafmta8kqee2502"
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "TH6iO+rt42AGjzRQa9UgUmQjMa7ukKJmMKjQJVM1FQk=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui174zvdetph33nk620lngdpgycwsy2pv3u4ww2hyxz6efqns2s0mzsxlzzmq",
                    "recipient": {
                      "AddressOwner": "sui1uq6u5sw926mj9putntntf35n53jqa6rzh947lp86nrf0em45h9vqyj0xuv"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui12anh2pck7kyy0hvuv63qyj65f3mz8wgmps0hyg60ss0gafmta8kqee2502",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByRecipient",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given recipient",
      "params": [
        {
          "name": "recipient",
          "description": "the recipient",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Owner"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given recipient",
          "params": [
            {
              "name": "recipient",
              "value": {
                "AddressOwner": "sui1g95kegl2yp9n2rk4z0uqy4qg9u06mjf5wuvva7vx4pnwlfkmtsdswqw7uc"
              }
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "2NGKiUqlTF8U0+hKQnlO1Q8jfGvhbkfHZyxCsXy379M=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui1cgchpksf9gu4q6dn5386p6fevstq50vgnrtm6ufdf6fhxr9wnv6s5ywe65",
                    "recipient": {
                      "AddressOwner": "sui1g95kegl2yp9n2rk4z0uqy4qg9u06mjf5wuvva7vx4pnwlfkmtsdswqw7uc"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui16czydtuuukdgtngefer32uq72hnxkzfdv76546js9zldqnzx52dstp0nvp",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsBySender",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events associated with the given sender.",
      "params": [
        {
          "name": "sender",
          "description": "the sender's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events associated with the given sender",
          "params": [
            {
              "name": "sender",
              "value": "sui1z9zzjgs6hjlsx79vgp6uxyujxaa6pvpsxpz7l9evv47re8pd52ns84axq9"
            },
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "Glqxic8bZos3j9ryIqTY2c9tafTh2ZRCZLqS8TCtesw=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui1z9zzjgs6hjlsx79vgp6uxyujxaa6pvpsxpz7l9evv47re8pd52ns84axq9",
                    "recipient": {
                      "AddressOwner": "sui10k3awpj0l5fpz6875fzlgxv8hw8dtxvs08sap0zsyqwhn5zuqc0s8zfmzy"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui13h0zv3ey4dg6y8r496qu2xeqvdtas2pxdsmt2wr9hd07fzsl8z8swrhq65",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByTimeRange",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted in [start_time, end_time) interval",
      "params": [
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "start_time",
          "description": "left endpoint of time interval, inclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end_time",
          "description": "right endpoint of time interval, exclusive",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted in [start_time, end_time) interval",
          "params": [
            {
              "name": "count",
              "value": 2
            },
            {
              "name": "start_time",
              "value": 0
            },
            {
              "name": "end_time",
              "value": 10
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "EHjpFxEuz+AhUkLRXB1BTXZaa+S3sDVHedGCyzR75BA=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui12ex9p0rx58lqmf0kx9v3wuedqzzu522luml59544c45pe9y64nvqgjp3fq",
                    "recipient": {
                      "AddressOwner": "sui1x4p5pdh20znx75yjrpq6k56ea3armsql9qjzptsdfhp0sc3l0e5sktkrnz"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui12mztwknn3nuqap57e0x0jmhch2cmd4ulh75g2j85f5545wzacd2qjscgxr",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getEventsByTransaction",
      "tags": [
        {
          "name": "Event Read API"
        }
      ],
      "description": "Return events emitted by the given transaction.",
      "params": [
        {
          "name": "digest",
          "description": "digest of the transaction, as base-64 encoded string",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "count",
          "description": "maximum size of the result, capped to EVENT_QUERY_MAX_LIMIT",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<SuiEventEnvelope>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EventEnvelope"
          }
        }
      },
      "examples": [
        {
          "name": "Return the Events emitted by a transaction",
          "params": [
            {
              "name": "digest",
              "value": "ae/YS6pz6WmYkPue2SG0X3pv6Xqf3V4ts3leqMcTAw4="
            },
            {
              "name": "count",
              "value": 2
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "timestamp": 0,
                "txDigest": "ae/YS6pz6WmYkPue2SG0X3pv6Xqf3V4ts3leqMcTAw4=",
                "event": {
                  "transferObject": {
                    "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                    "transactionModule": "native",
                    "sender": "sui1szeavjha0hn3ntu6skklt8ld2tk7596ym90kundv658mp5dfnplqm7xlu0",
                    "recipient": {
                      "AddressOwner": "sui15gjjrm4fxwugn8hmype45nm2ajppxmhlw0ngr8rnwa7jkv2yqkwshzgul6"
                    },
                    "objectType": "0x2::example::Object",
                    "objectId": "sui1zztrxczn40ydp6zrwy32wfc5l0csa0qhqv79kny3nzfxmhxkqvxsxcjdcr",
                    "version": 2
                  }
                }
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getMoveFunctionArgTypes",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return the argument types of a Move function, based on normalized Type.",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "Vec<MoveFunctionArgType>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MoveFunctionArgType"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveFunction",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move function",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedFunction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModule",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move module",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedModule",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedModule"
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveModulesByPackage",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return structured representations of all modules in the given package",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "BTreeMap<String,SuiMoveNormalizedModule>",
        "required": true,
        "schema": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/SuiMoveNormalizedModule"
          }
        }
      }
    },
    {
      "name": "sui_getNormalizedMoveStruct",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return a structured representation of Move struct",
      "params": [
        {
          "name": "package",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "struct_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "SuiMoveNormalizedStruct",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
        }
      }
    },
    {
      "name": "sui_getObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the object information for a specified object",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Object data",
          "params": [
            {
              "name": "object_id",
              "value": "sui1r8f93vgnmr37z27292np9vcyanjmykvgsxxawg6wqjv3xge7hyvq688g3w"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "Exists",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::coin::Coin<0x2::sui::SUI>>",
                  "has_public_transfer": true,
                  "fields": {
                    "balance": 10000,
                    "id": {
                      "id": "sui1r8f93vgnmr37z27292np9vcyanjmykvgsxxawg6wqjv3xge7hyvq688g3w"
                    }
                  }
                },
                "owner": {
                  "AddressOwner": "sui1cytr3tuf646mawvsq0fs5fz6ca9q9cnwgh9cpmsmnsq2jv69ee0sqx37j3"
                },
                "previousTransaction": "Er6p/+BHSNZpbDBjFzUZOuqVuPkILBBiDA1uP8lZa0U=",
                "storageRebate": 100,
                "reference": {
                  "objectId": "sui1r8f93vgnmr37z27292np9vcyanjmykvgsxxawg6wqjv3xge7hyvq688g3w",
                  "version": 1,
                  "digest": "ONDcJL7Dcbs+RjRWH4iS5gQCGrlrYy6voinsPdiFRCs="
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByAddress",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an address.",
      "params": [
        {
          "name": "address",
          "description": "the owner's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an address",
          "params": [
            {
              "name": "address",
              "value": "sui17lct9h3rywsxa0p4dwkkz3exkvfasygp9497wgm426r3yznudheqw0rze3"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "object_id": "sui18zwrw0y0hcrtmfaxzysx2fngm4tg0lh887k85tzkfkngn6w6wmsslzp6j6",
                "version": 0,
                "digest": "Qw0ZH7yTfUL3QQSqKRhx9LnRIPdlg6HaXREj8rigrGA=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "sui17lct9h3rywsxa0p4dwkkz3exkvfasygp9497wgm426r3yznudheqw0rze3"
                },
                "previous_transaction": "a5QKZuQu/Xgq9SAxEjMa3C7W9ALco5a/5t+jrIpX6gg="
              },
              {
                "object_id": "sui1scy8pl23tnmu56hm3p7arcymarj9rnfuxeq8vc3uqgccnzlqwgkqat6ev7",
                "version": 0,
                "digest": "COTrIpxEy5V9Kc9zcK+KG5xULUmzyDz7nGg/t9BSbik=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "sui17lct9h3rywsxa0p4dwkkz3exkvfasygp9497wgm426r3yznudheqw0rze3"
                },
                "previous_transaction": "136J57/v1Pc62j0ZrIfUU1HwGWqIC5XD6iRN0GDStlM="
              },
              {
                "object_id": "sui1sxtdqj9h5mgyerku39tempha8lysc5he59xxhqftjnlxz0zme6asrws96u",
                "version": 0,
                "digest": "XusdRJ4lFhZtV9cf3rFU0NyezbezAFfQqTJoTKw1LNw=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "sui17lct9h3rywsxa0p4dwkkz3exkvfasygp9497wgm426r3yznudheqw0rze3"
                },
                "previous_transaction": "Gj6JgCnQJO7B1Exq9eL6ze2E0DtTc1FPFuPWbgAIEFE="
              },
              {
                "object_id": "sui1vjah8g0dtzevrzcvhumh0yhzqmntsr2dtm4xfch8q43mzkysymzqvz8u3l",
                "version": 0,
                "digest": "43+UGkUe+CCaD7+/G1SbK7Jrjq7giJUUbfJ7w88mEME=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "AddressOwner": "sui17lct9h3rywsxa0p4dwkkz3exkvfasygp9497wgm426r3yznudheqw0rze3"
                },
                "previous_transaction": "Sy4nwe7VbDO1eQNBUOpGvM92U+ALbyS2O9BNpovBYMc="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getObjectsOwnedByObject",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the list of objects owned by an object.",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the owner object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "Vec<SuiObjectInfo>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ObjectInfo"
          }
        }
      },
      "examples": [
        {
          "name": "Get objects owned by an object",
          "params": [
            {
              "name": "object_id",
              "value": "sui1fnvyf7fzvgl6trxadmedq5cuudvlxt5t6rx4l8sufmtc2cptz3xstwsdd2"
            }
          ],
          "result": {
            "name": "Result",
            "value": [
              {
                "object_id": "sui10xyr0kasz36vsdtxcke22d2pphd2rhflcjhnyxxhdnr656lpsqzq6mxu2c",
                "version": 0,
                "digest": "5eOMs1zK8Yt/Gk49x7Hn/9Pb1oL2ANH2LcCSH399v8o=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "ObjectOwner": "sui1fnvyf7fzvgl6trxadmedq5cuudvlxt5t6rx4l8sufmtc2cptz3xstwsdd2"
                },
                "previous_transaction": "lQVa3F4Ueh7uLt0jcUR0REaJyUb2mlhZJLkcS4rm1M0="
              },
              {
                "object_id": "sui1dc0q9an935sme6dc30wwacffg9zwa3ru7wfc3wmgpa5mwsntc55srx0pr8",
                "version": 0,
                "digest": "KWkv3H0v83TD+HDzb7coq0GHgxIG0VGB/3xQdyQXWGo=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "ObjectOwner": "sui1fnvyf7fzvgl6trxadmedq5cuudvlxt5t6rx4l8sufmtc2cptz3xstwsdd2"
                },
                "previous_transaction": "k2M4Kfy6bW4MyxPT2/52FLgep2slXl1DUDLNhZXzfrg="
              },
              {
                "object_id": "sui1lsq0lndqpt79a20rnje0yvjjtnwwag66gva8kr6sar0m9csm5jts6rskc6",
                "version": 0,
                "digest": "xUqzCj2a3AfBQpxNa77K+UV8mvd6kfYxdghTk004NjQ=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "ObjectOwner": "sui1fnvyf7fzvgl6trxadmedq5cuudvlxt5t6rx4l8sufmtc2cptz3xstwsdd2"
                },
                "previous_transaction": "vPfDJlUAmmHx3g6uQgouSuG7dyqy3V1affqUnA7waQg="
              },
              {
                "object_id": "sui1u7j5jq8j0xlyc6ssr6dr4awgquq397qgvj9ndmal3hhg5x5zmerqztxwtu",
                "version": 0,
                "digest": "2VBOlqEQiheO929Ww5ljOi6zELypEk5fLzjOc56qy7Y=",
                "type_": "0x2::coin::Coin<0x2::sui::SUI>",
                "owner": {
                  "ObjectOwner": "sui1fnvyf7fzvgl6trxadmedq5cuudvlxt5t6rx4l8sufmtc2cptz3xstwsdd2"
                },
                "previous_transaction": "YAaIgE4HhEifkPf4Zswp37HaY3POlPnZXcpaQPThdpk="
              }
            ]
          }
        }
      ]
    },
    {
      "name": "sui_getRawObject",
      "tags": [
        {
          "name": "BCS API"
        }
      ],
      "description": "Return the raw BCS serialized move object bytes for a specified object.",
      "params": [
        {
          "name": "object_id",
          "description": "the id of the object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "GetRawObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Raw Object data",
          "params": [
            {
              "name": "object_id",
              "value": "sui1rrhtl8a6uq9a8rjhsuh52gjydrslc97gz3cgnhzrrr7agqxmvumq6y8gvx"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "Exists",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::sui::SUI>",
                  "has_public_transfer": true,
                  "version": 1,
                  "bcs_bytes": "GO6/n7rgC9OOV4cvRSJEaOH8F8gUcIncQxj91ADbZzYQJwAAAAAAAA=="
                },
                "owner": {
                  "AddressOwner": "sui1fme4pj2jvakc2lwr07h8myef3gfytscmggrg3stgdj6dzdtdzuvqxx0fq9"
                },
                "previousTransaction": "Ddguk6SDxatfAaKYh6HZXltUi2FtpjsM4H2Bbonve5o=",
                "storageRebate": 100,
                "reference": {
                  "objectId": "sui1rrhtl8a6uq9a8rjhsuh52gjydrslc97gz3cgnhzrrr7agqxmvumq6y8gvx",
                  "version": 1,
                  "digest": "OCF3tEIruqJ/fmJeoxmqChhIZm/+0ika4ko/gXc1OgU="
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTotalTransactionNumber",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the total number of transactions known to the server.",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "examples": [
        {
          "name": "Get total number of transactions",
          "params": [],
          "result": {
            "name": "Result",
            "value": 100
          }
        }
      ]
    },
    {
      "name": "sui_getTransaction",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return the transaction response object.",
      "params": [
        {
          "name": "digest",
          "description": "the digest of the queried transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "SuiTransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SuiTransactionResponse"
        }
      },
      "examples": [
        {
          "name": "Return the transaction response object for specified transaction digest",
          "params": [
            {
              "name": "digest",
              "value": "qDBcbgCe1AsMJIpxQ6v0kZn2xsfZlZYSVEPmtIpJ/XM="
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "certificate": {
                "transactionDigest": "qDBcbgCe1AsMJIpxQ6v0kZn2xsfZlZYSVEPmtIpJ/XM=",
                "data": {
                  "transactions": [
                    {
                      "TransferObject": {
                        "recipient": "sui1dqyr7x87guhnj4tacs42alht3s256lwug44c464rzvk8gq6nrhys73x6ej",
                        "objectRef": {
                          "objectId": "sui136pldcvc6ttaz7afrhw8uutu7uyvjdcxpuzqfpekaselk96xmxvsh8ga6n",
                          "version": 2,
                          "digest": "DQnNr3J9HYTMyql6Asw6mAQWcOFgnbcU6YWMlunkaYU="
                        }
                      }
                    }
                  ],
                  "sender": "sui17cavgeyzdtmkf424cfy97qn2d9t6equwu0vnpm8fnvscklcggslsy6h5r0",
                  "gasPayment": {
                    "objectId": "sui15hjce4wxwlkcqnuz78y9s7uc6exqp0a5dsuy80vt7mx05lr94pss4qcmsq",
                    "version": 2,
                    "digest": "OGmM0f3Kw9zo2MfOhj8xPaPb2SqD7ybRKLiP5mvybg4="
                  },
                  "gasBudget": 1000
                },
                "txSignature": "AEH8OsXH6heFeldJ9GY9cRc7HArxPPv1ezxTuthMNvH4dQ7J8yMijRqYSjaxFGKTiyQhbLpJjxz6ui9HqSps3wJSqtDy7tEheWSiGRC8OD4s3IG4qztmVcGNngw9zviB9g==",
                "authSignInfo": {
                  "epoch": 0,
                  "signature": "",
                  "signers_map": [
                    58,
                    48,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ]
                }
              },
              "effects": {
                "status": {
                  "status": "success"
                },
                "gasUsed": {
                  "computationCost": 100,
                  "storageCost": 100,
                  "storageRebate": 10
                },
                "transactionDigest": "Xxzzv9+X6GWxDABG4pPAjOwPQHg9msS/SrtNf4IGR/0=",
                "mutated": [
                  {
                    "owner": {
                      "AddressOwner": "sui17cavgeyzdtmkf424cfy97qn2d9t6equwu0vnpm8fnvscklcggslsy6h5r0"
                    },
                    "reference": {
                      "objectId": "sui15hjce4wxwlkcqnuz78y9s7uc6exqp0a5dsuy80vt7mx05lr94pss4qcmsq",
                      "version": 2,
                      "digest": "OGmM0f3Kw9zo2MfOhj8xPaPb2SqD7ybRKLiP5mvybg4="
                    }
                  },
                  {
                    "owner": {
                      "AddressOwner": "sui1dqyr7x87guhnj4tacs42alht3s256lwug44c464rzvk8gq6nrhys73x6ej"
                    },
                    "reference": {
                      "objectId": "sui136pldcvc6ttaz7afrhw8uutu7uyvjdcxpuzqfpekaselk96xmxvsh8ga6n",
                      "version": 2,
                      "digest": "DQnNr3J9HYTMyql6Asw6mAQWcOFgnbcU6YWMlunkaYU="
                    }
                  }
                ],
                "gasObject": {
                  "owner": {
                    "ObjectOwner": "sui17cavgeyzdtmkf424cfy97qn2d9t6equwu0vnpm8fnvscklcggslsy6h5r0"
                  },
                  "reference": {
                    "objectId": "sui15hjce4wxwlkcqnuz78y9s7uc6exqp0a5dsuy80vt7mx05lr94pss4qcmsq",
                    "version": 2,
                    "digest": "OGmM0f3Kw9zo2MfOhj8xPaPb2SqD7ybRKLiP5mvybg4="
                  }
                },
                "events": [
                  {
                    "transferObject": {
                      "packageId": "sui1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqjrq5fa",
                      "transactionModule": "native",
                      "sender": "sui17cavgeyzdtmkf424cfy97qn2d9t6equwu0vnpm8fnvscklcggslsy6h5r0",
                      "recipient": {
                        "AddressOwner": "sui1dqyr7x87guhnj4tacs42alht3s256lwug44c464rzvk8gq6nrhys73x6ej"
                      },
                      "objectType": "0x2::example::Object",
                      "objectId": "sui136pldcvc6ttaz7afrhw8uutu7uyvjdcxpuzqfpekaselk96xmxvsh8ga6n",
                      "version": 2
                    }
                  }
                ]
              },
              "timestamp_ms": null,
              "parsed_data": null
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactions",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Return list of transactions for a specified query criteria.",
      "params": [
        {
          "name": "query",
          "description": "the transaction query criteria.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionQuery"
          }
        },
        {
          "name": "cursor",
          "description": "Optional paging cursor",
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        },
        {
          "name": "limit",
          "description": "Maximum item returned per page",
          "schema": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          }
        },
        {
          "name": "order",
          "description": "Transaction query ordering",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Ordering"
          }
        }
      ],
      "result": {
        "name": "TransactionsPage",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Page_for_TransactionDigest_and_TransactionDigest"
        }
      },
      "examples": [
        {
          "name": "Return the transaction digest for specified query criteria",
          "params": [
            {
              "name": "query",
              "value": {
                "InputObject": "sui1gdn9hr0r72p05j9nuqgrh2dma44qv9fmnlzgdcgp7r57yup6epnqrd9e3w"
              }
            },
            {
              "name": "cursor",
              "value": "bQauzE3ffnkmo2GXDGWlsSxDgF0Nb1QCp60Npb3sVJw="
            },
            {
              "name": "limit",
              "value": 100
            },
            {
              "name": "order",
              "value": "Ascending"
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "data": [
                "hdGRg97nx/+VVpf+K3BMlUCjhG6SmLddtyXB7jAnt4M=",
                "6mieGjjrR2xu/ETttc09/jL0v2w+isQu7xOF4BQD5Jo=",
                "Sylq3LIuon08kuTOIlasZFy6vcNs8bny7ISBomyn2BE="
              ],
              "nextCursor": "aVWXlAKLjwLkMCpVldiImmfG0xxslw5WfwPvZ9gRpPg="
            }
          }
        }
      ]
    },
    {
      "name": "sui_getTransactionsInRange",
      "tags": [
        {
          "name": "Read API"
        }
      ],
      "description": "Return list of transaction digests within the queried range.",
      "params": [
        {
          "name": "start",
          "description": "the matching transactions' sequence number will be greater than or equals to the starting sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end",
          "description": "the matching transactions' sequence number will be less than the ending sequence number",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec<TransactionDigest>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      }
    },
    {
      "name": "sui_mergeCoins",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to merge multiple coins into one coin.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "description": "the coin object to merge into, this coin will remain after the transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "description": "the coin object to be merged, this coin will be destroyed, the balance will be added to `primary_coin`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_moveCall",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to execute a Move call on the network, by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "description": "the Move package ID, e.g. `0x2`",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "description": "the Move module name, e.g. `devnet_nft`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "description": "the move function name, e.g. `mint`",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "description": "the type arguments of the Move function",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "description": "the arguments to be passed into the Move function, in [SuiJson](https://docs.sui.io/build/sui-json) format",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_pay",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send Coin<T> to a list of addresses, where `T` can be any coin type, following a list of amounts, The object specified in the `gas` field will be used to pay the gas fee for the transaction. The gas object can not appear in `input_coins`. If the gas object is not specified, the RPC server will auto-select one.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_payAllSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send all SUI coins to one recipient. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_all_sui does are: 1. accumulate all SUI from input coins and deposit all SUI to the first input coin 2. transfer the updated first coin to the recipient and also use this first coin as gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - actual_gas_cost. 4. all other input coins other than the first are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipient",
          "description": "the recipient address,",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_paySui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Send SUI coins to a list of addresses, following a list of amounts. This is for SUI coin only and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "input_coins",
          "description": "the Sui coins to be used in this transaction, including the coin for gas payment.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectID"
            }
          }
        },
        {
          "name": "recipients",
          "description": "the recipients' addresses, the length of this vector must be the same as amounts.",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        },
        {
          "name": "amounts",
          "description": "the amounts to be transferred to recipients, following the same order",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_publish",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to publish Move module.",
      "params": [
        {
          "name": "sender",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "description": "the compiled bytes of a move module, the",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoin",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "description": "the amounts to split out from the coin",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoinEqual",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "description": "the coin object to be spilt",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_count",
          "description": "the number of coins to split into",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_subscribeEvent",
      "tags": [
        {
          "name": "Event Subscription"
        },
        {
          "name": "Websocket"
        },
        {
          "name": "PubSub"
        }
      ],
      "description": "Subscribe to a stream of Sui event",
      "params": [
        {
          "name": "filter",
          "description": "the filter criteria of the event stream, see the [Sui docs](https://docs.sui.io/build/pubsub#event-filters) for detailed examples.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilter"
          }
        }
      ],
      "result": {
        "name": "SuiEventEnvelope",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/EventEnvelope"
        }
      }
    },
    {
      "name": "sui_transferObject",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to transfer an object from one address to another. The object's type must allow public transfers",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "description": "the ID of the object to be transferred",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "description": "gas object to be used in this transaction, the gateway will pick one from the signer's possession if not provided",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_transferSui",
      "tags": [
        {
          "name": "Transaction Builder API"
        }
      ],
      "description": "Create an unsigned transaction to send SUI coin object to a Sui address. The SUI object is also used as the gas object.",
      "params": [
        {
          "name": "signer",
          "description": "the transaction signer's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "sui_object_id",
          "description": "the Sui coin object to be used in this transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "description": "the gas budget, the transaction will fail if the gas cost exceed the budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "description": "the recipient's Sui address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "amount",
          "description": "the amount to be split out and transferred",
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_tryGetPastObject",
      "tags": [
        {
          "name": "Full Node API"
        }
      ],
      "description": "Note there is no software-level guarantee/SLA that objects with past versions can be retrieved by this API, even if the object and version exists/existed. The result may vary across nodes depending on their pruning policies. Return the object information for a specified version",
      "params": [
        {
          "name": "object_id",
          "description": "the ID of the queried object",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "version",
          "description": "the version of the queried object. If None, default to the latest known version",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      ],
      "result": {
        "name": "GetPastObjectDataResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      },
      "examples": [
        {
          "name": "Get Past Object data",
          "params": [
            {
              "name": "object_id",
              "value": "sui1gjtj2fkyar8ztgzpdsu4tkqchvdtp6pjsa7k9q3nu0savnmkkudq3qqxfj"
            },
            {
              "name": "version",
              "value": 4
            }
          ],
          "result": {
            "name": "Result",
            "value": {
              "status": "VersionFound",
              "details": {
                "data": {
                  "dataType": "moveObject",
                  "type": "0x2::coin::Coin<0x2::coin::Coin<0x2::sui::SUI>>",
                  "has_public_transfer": true,
                  "fields": {
                    "balance": 10000,
                    "id": {
                      "id": "sui1gjtj2fkyar8ztgzpdsu4tkqchvdtp6pjsa7k9q3nu0savnmkkudq3qqxfj"
                    }
                  }
                },
                "owner": {
                  "AddressOwner": "sui1srky7ve0f5dxwsk9xletkvj88vqmrh93e2kfgfez53u8hvv9u3us0uw30w"
                },
                "previousTransaction": "GRaSbl/bJd2EL3NquXPof1O0hXhCeJod1ZFnYps8XKs=",
                "storageRebate": 100,
                "reference": {
                  "objectId": "sui1gjtj2fkyar8ztgzpdsu4tkqchvdtp6pjsa7k9q3nu0savnmkkudq3qqxfj",
                  "version": 4,
                  "digest": "5H2/SIJ+wIGOAN5LKX8EfDvtpD1un5sbG8RM3841dOc="
                }
              }
            }
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "AuthorityPublicKeyBytes": {
        "description": "Defines the compressed version of the public key that we pass around in Sui",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "AuthorityQuorumSignInfo": {
        "description": "Represents at least a quorum (could be more) of authority signatures. STRONG_THRESHOLD indicates whether to use the quorum threshold for quorum check. When STRONG_THRESHOLD is true, the quorum is valid when the total stake is at least the quorum threshold (2f+1) of the committee; when STRONG_THRESHOLD is false, the quorum is valid when the total stake is at least the validity threshold (f+1) of the committee.",
        "type": "object",
        "required": [
          "epoch",
          "signature",
          "signers_map"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "signature": {
            "$ref": "#/components/schemas/Base64"
          },
          "signers_map": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "BalanceChangeType": {
        "type": "string",
        "enum": [
          "Gas",
          "Pay",
          "Receive"
        ]
      },
      "Base64": {
        "type": "string"
      },
      "Bech32": {
        "type": "string"
      },
      "CertifiedTransaction": {
        "type": "object",
        "required": [
          "authSignInfo",
          "data",
          "transactionDigest",
          "txSignature"
        ],
        "properties": {
          "authSignInfo": {
            "description": "authority signature information, if available, is signed by an authority, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorityQuorumSignInfo"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "transactionDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "txSignature": {
            "description": "tx_signature is signed by the transaction sender, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Signature"
              }
            ]
          }
        }
      },
      "CertifiedTransactionEffects": {
        "description": "The certified Transaction Effects which has signatures from >= 2/3 of validators",
        "type": "object",
        "required": [
          "authSignInfo",
          "effects",
          "transactionEffectsDigest"
        ],
        "properties": {
          "authSignInfo": {
            "description": "authority signature information signed by the quorum of the validators.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorityQuorumSignInfo"
              }
            ]
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "transactionEffectsDigest": {
            "$ref": "#/components/schemas/TransactionEffectsDigest"
          }
        }
      },
      "CommitteeInfoResponse": {
        "type": "object",
        "required": [
          "epoch"
        ],
        "properties": {
          "committee_info": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/AuthorityPublicKeyBytes"
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bcs_bytes",
              "dataType",
              "has_public_transfer",
              "type",
              "version"
            ],
            "properties": {
              "bcs_bytes": {
                "$ref": "#/components/schemas/Base64"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "has_public_transfer": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              },
              "version": {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "id",
              "module_map"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "module_map": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Base64"
                }
              }
            }
          }
        ]
      },
      "Ed25519SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "Event": {
        "oneOf": [
          {
            "description": "Move-specific event",
            "type": "object",
            "required": [
              "moveEvent"
            ],
            "properties": {
              "moveEvent": {
                "type": "object",
                "required": [
                  "bcs",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "type"
                ],
                "properties": {
                  "bcs": {
                    "$ref": "#/components/schemas/Base64"
                  },
                  "fields": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/MoveStruct"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Module published",
            "type": "object",
            "required": [
              "publish"
            ],
            "properties": {
              "publish": {
                "type": "object",
                "required": [
                  "packageId",
                  "sender"
                ],
                "properties": {
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Coin balance changing event",
            "type": "object",
            "required": [
              "coinBalanceChange"
            ],
            "properties": {
              "coinBalanceChange": {
                "type": "object",
                "required": [
                  "amount",
                  "changeType",
                  "coinObjectId",
                  "coinType",
                  "owner",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "format": "int128"
                  },
                  "changeType": {
                    "$ref": "#/components/schemas/BalanceChangeType"
                  },
                  "coinObjectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "coinType": {
                    "type": "string"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Epoch change",
            "type": "object",
            "required": [
              "epochChange"
            ],
            "properties": {
              "epochChange": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New checkpoint",
            "type": "object",
            "required": [
              "checkpoint"
            ],
            "properties": {
              "checkpoint": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transfer objects to new address / wrap in another object / coin",
            "type": "object",
            "required": [
              "transferObject"
            ],
            "properties": {
              "transferObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object mutated.",
            "type": "object",
            "required": [
              "mutateObject"
            ],
            "properties": {
              "mutateObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delete object",
            "type": "object",
            "required": [
              "deleteObject"
            ],
            "properties": {
              "deleteObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "packageId",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "New object creation",
            "type": "object",
            "required": [
              "newObject"
            ],
            "properties": {
              "newObject": {
                "type": "object",
                "required": [
                  "objectId",
                  "objectType",
                  "packageId",
                  "recipient",
                  "sender",
                  "transactionModule",
                  "version"
                ],
                "properties": {
                  "objectId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "objectType": {
                    "type": "string"
                  },
                  "packageId": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "recipient": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/SuiAddress"
                  },
                  "transactionModule": {
                    "type": "string"
                  },
                  "version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventEnvelope": {
        "type": "object",
        "required": [
          "event",
          "timestamp"
        ],
        "properties": {
          "event": {
            "description": "Specific event type",
            "allOf": [
              {
                "$ref": "#/components/schemas/Event"
              }
            ]
          },
          "timestamp": {
            "description": "UTC timestamp in milliseconds since epoch (1/1/1970)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "txDigest": {
            "description": "Transaction digest of associated transaction, if any",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "EventFilter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Package"
            ],
            "properties": {
              "Package": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Module"
            ],
            "properties": {
              "Module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Move StructTag string value of the event type e.g. `0x2::devnet_nft::MintNFTEvent`",
            "type": "object",
            "required": [
              "MoveEventType"
            ],
            "properties": {
              "MoveEventType": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MoveEventField"
            ],
            "properties": {
              "MoveEventField": {
                "type": "object",
                "required": [
                  "path",
                  "value"
                ],
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "value": true
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SenderAddress"
            ],
            "properties": {
              "SenderAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EventType"
            ],
            "properties": {
              "EventType": {
                "$ref": "#/components/schemas/EventType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ObjectId"
            ],
            "properties": {
              "ObjectId": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "All"
            ],
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Any"
            ],
            "properties": {
              "Any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventFilter"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "And"
            ],
            "properties": {
              "And": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Or"
            ],
            "properties": {
              "Or": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  },
                  {
                    "$ref": "#/components/schemas/EventFilter"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventType": {
        "description": "Auto-generated discriminant enum variants",
        "oneOf": [
          {
            "description": "Transaction level event Move-specific event",
            "type": "string",
            "enum": [
              "MoveEvent"
            ]
          },
          {
            "description": "Module published",
            "type": "string",
            "enum": [
              "Publish"
            ]
          },
          {
            "description": "Coin balance changing event",
            "type": "string",
            "enum": [
              "CoinBalanceChange"
            ]
          },
          {
            "description": "Epoch change",
            "type": "string",
            "enum": [
              "EpochChange"
            ]
          },
          {
            "description": "New checkpoint",
            "type": "string",
            "enum": [
              "Checkpoint"
            ]
          },
          {
            "description": "Object level event Transfer objects to new address / wrap in another object",
            "type": "string",
            "enum": [
              "TransferObject"
            ]
          },
          {
            "description": "Object level event Object mutated.",
            "type": "string",
            "enum": [
              "MutateObject"
            ]
          },
          {
            "description": "Delete object",
            "type": "string",
            "enum": [
              "DeleteObject"
            ]
          },
          {
            "description": "New object creation",
            "type": "string",
            "enum": [
              "NewObject"
            ]
          }
        ]
      },
      "ExecuteTransactionRequestType": {
        "type": "string",
        "enum": [
          "ImmediateReturn",
          "WaitForTxCert",
          "WaitForEffectsCert",
          "WaitForLocalExecution"
        ]
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error",
              "status"
            ],
            "properties": {
              "error": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "GasCostSummary": {
        "type": "object",
        "required": [
          "computationCost",
          "storageCost",
          "storageRebate"
        ],
        "properties": {
          "computationCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageCost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storageRebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "type": "object",
                "required": [
                  "id",
                  "initial_shared_version"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  "initial_shared_version": {
                    "$ref": "#/components/schemas/SequenceNumber"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MoveCall": {
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "typeArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MoveCallParams": {
        "type": "object",
        "required": [
          "arguments",
          "function",
          "module",
          "packageObjectId"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "packageObjectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "typeArguments": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        }
      },
      "MoveFunctionArgType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Pure"
            ]
          },
          {
            "type": "object",
            "required": [
              "Object"
            ],
            "properties": {
              "Object": {
                "$ref": "#/components/schemas/ObjectValueKind"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MovePackage": {
        "type": "object",
        "required": [
          "disassembled"
        ],
        "properties": {
          "disassembled": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MoveValue"
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "$ref": "#/components/schemas/Base64"
          },
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MoveValue"
              },
              {
                "type": "null"
              }
            ]
          }
        ]
      },
      "Object": {
        "type": "object",
        "required": [
          "data",
          "owner",
          "previousTransaction",
          "reference",
          "storageRebate"
        ],
        "properties": {
          "data": {
            "description": "The meat of the object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Data"
              }
            ]
          },
          "owner": {
            "description": "The owner that unlocks this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Base64"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Bech32"
      },
      "ObjectInfo": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "owner",
          "previousTransaction",
          "type",
          "version"
        ],
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/ObjectDigest"
          },
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "owner": {
            "$ref": "#/components/schemas/Owner"
          },
          "previousTransaction": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/SequenceNumber"
          }
        }
      },
      "ObjectRead": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/Object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Exists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "NotExists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectRef"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Deleted"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectValueKind": {
        "type": "string",
        "enum": [
          "ByImmutableReference",
          "ByMutableReference",
          "ByValue"
        ]
      },
      "Ordering": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "Owner": {
        "oneOf": [
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is shared, can be used by any address, and is mutable.",
            "type": "object",
            "required": [
              "Shared"
            ],
            "properties": {
              "Shared": {
                "type": "object",
                "required": [
                  "initial_shared_version"
                ],
                "properties": {
                  "initial_shared_version": {
                    "description": "The version at which the object became shared",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SequenceNumber"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is immutable, and hence ownership doesn't matter.",
            "type": "string",
            "enum": [
              "Immutable"
            ]
          }
        ]
      },
      "Page_for_TransactionDigest_and_TransactionDigest": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "nextCursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Pay": {
        "type": "object",
        "required": [
          "amounts",
          "coins",
          "recipients"
        ],
        "properties": {
          "amounts": {
            "description": "The amounts each recipient will receive. Must be the same length as amounts",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "coins": {
            "description": "The coins to be used for payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "recipients": {
            "description": "The addresses that will receive payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        }
      },
      "PaySui": {
        "description": "Send SUI coins to a list of addresses, following a list of amounts. only for SUI coin and does not require a separate gas coin object. Specifically, what pay_sui does are: 1. debit each input_coin to create new coin following the order of amounts and assign it to the corresponding recipient. 2. accumulate all residual SUI from input coins left and deposit all SUI to the first input coin, then use the first input coin as the gas coin object. 3. the balance of the first input coin after tx is sum(input_coins) - sum(amounts) - actual_gas_cost 4. all other input coints other than the first one are deleted.",
        "type": "object",
        "required": [
          "amounts",
          "coins",
          "recipients"
        ],
        "properties": {
          "amounts": {
            "description": "The amounts each recipient will receive. Must be the same length as amounts",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "coins": {
            "description": "The coins to be used for payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "recipients": {
            "description": "The addresses that will receive payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiAddress"
            }
          }
        }
      },
      "RPCTransactionRequestParams": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "transferObjectRequestParams"
            ],
            "properties": {
              "transferObjectRequestParams": {
                "$ref": "#/components/schemas/TransferObjectParams"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "moveCallRequestParams"
            ],
            "properties": {
              "moveCallRequestParams": {
                "$ref": "#/components/schemas/MoveCallParams"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Secp256k1SuiSignature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Signature": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ed25519SuiSignature"
            ],
            "properties": {
              "Ed25519SuiSignature": {
                "$ref": "#/components/schemas/Ed25519SuiSignature"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Secp256k1SuiSignature"
            ],
            "properties": {
              "Secp256k1SuiSignature": {
                "$ref": "#/components/schemas/Secp256k1SuiSignature"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SignatureScheme": {
        "type": "string",
        "enum": [
          "ED25519",
          "Secp256k1",
          "BLS12381"
        ]
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Bech32"
      },
      "SuiChangeEpoch": {
        "type": "object",
        "required": [
          "computation_charge",
          "epoch",
          "storage_charge"
        ],
        "properties": {
          "computation_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_charge": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "SuiExecuteTransactionResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ImmediateReturn"
            ],
            "properties": {
              "ImmediateReturn": {
                "type": "object",
                "required": [
                  "tx_digest"
                ],
                "properties": {
                  "tx_digest": {
                    "$ref": "#/components/schemas/TransactionDigest"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TxCert"
            ],
            "properties": {
              "TxCert": {
                "type": "object",
                "required": [
                  "certificate"
                ],
                "properties": {
                  "certificate": {
                    "$ref": "#/components/schemas/CertifiedTransaction"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "EffectsCert"
            ],
            "properties": {
              "EffectsCert": {
                "type": "object",
                "required": [
                  "certificate",
                  "confirmed_local_execution",
                  "effects"
                ],
                "properties": {
                  "certificate": {
                    "$ref": "#/components/schemas/CertifiedTransaction"
                  },
                  "confirmed_local_execution": {
                    "type": "boolean"
                  },
                  "effects": {
                    "$ref": "#/components/schemas/CertifiedTransactionEffects"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiJsonValue": {},
      "SuiMoveAbility": {
        "type": "string",
        "enum": [
          "Copy",
          "Drop",
          "Store",
          "Key"
        ]
      },
      "SuiMoveAbilitySet": {
        "type": "object",
        "required": [
          "abilities"
        ],
        "properties": {
          "abilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbility"
            }
          }
        }
      },
      "SuiMoveModuleId": {
        "type": "object",
        "required": [
          "address",
          "name"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SuiMoveNormalizedField": {
        "type": "object",
        "required": [
          "name",
          "type_"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type_": {
            "$ref": "#/components/schemas/SuiMoveNormalizedType"
          }
        }
      },
      "SuiMoveNormalizedFunction": {
        "type": "object",
        "required": [
          "is_entry",
          "parameters",
          "return_",
          "type_parameters",
          "visibility"
        ],
        "properties": {
          "is_entry": {
            "type": "boolean"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "return_": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedType"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveAbilitySet"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/SuiMoveVisibility"
          }
        }
      },
      "SuiMoveNormalizedModule": {
        "type": "object",
        "required": [
          "address",
          "exposed_functions",
          "file_format_version",
          "friends",
          "name",
          "structs"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "exposed_functions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedFunction"
            }
          },
          "file_format_version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveModuleId"
            }
          },
          "name": {
            "type": "string"
          },
          "structs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SuiMoveNormalizedStruct"
            }
          }
        }
      },
      "SuiMoveNormalizedStruct": {
        "type": "object",
        "required": [
          "abilities",
          "fields",
          "type_parameters"
        ],
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveNormalizedField"
            }
          },
          "type_parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiMoveStructTypeParameter"
            }
          }
        }
      },
      "SuiMoveNormalizedType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Bool",
              "U8",
              "U16",
              "U32",
              "U64",
              "U128",
              "U256",
              "Address",
              "Signer"
            ]
          },
          {
            "type": "object",
            "required": [
              "Struct"
            ],
            "properties": {
              "Struct": {
                "type": "object",
                "required": [
                  "address",
                  "module",
                  "name",
                  "type_arguments"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "module": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type_arguments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SuiMoveNormalizedType"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Vector"
            ],
            "properties": {
              "Vector": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "TypeParameter"
            ],
            "properties": {
              "TypeParameter": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Reference"
            ],
            "properties": {
              "Reference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutableReference"
            ],
            "properties": {
              "MutableReference": {
                "$ref": "#/components/schemas/SuiMoveNormalizedType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiMoveStructTypeParameter": {
        "type": "object",
        "required": [
          "constraints",
          "is_phantom"
        ],
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/SuiMoveAbilitySet"
          },
          "is_phantom": {
            "type": "boolean"
          }
        }
      },
      "SuiMoveVisibility": {
        "type": "string",
        "enum": [
          "Private",
          "Public",
          "Friend"
        ]
      },
      "SuiParsedMergeCoinResponse": {
        "type": "object",
        "required": [
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "updatedCoin": {
            "description": "The updated original coin object after merge",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedPublishResponse": {
        "type": "object",
        "required": [
          "createdObjects",
          "package",
          "updatedGas"
        ],
        "properties": {
          "createdObjects": {
            "description": "List of Move objects created as part of running the module initializers in the package",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "package": {
            "description": "The newly published package object reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedSplitCoinResponse": {
        "type": "object",
        "required": [
          "newCoins",
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "newCoins": {
            "description": "All the newly created coin objects generated from the split",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "updatedCoin": {
            "description": "The updated original coin object after split",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiParsedTransactionResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/SuiParsedPublishResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MergeCoin"
            ],
            "properties": {
              "MergeCoin": {
                "$ref": "#/components/schemas/SuiParsedMergeCoinResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SplitCoin"
            ],
            "properties": {
              "SplitCoin": {
                "$ref": "#/components/schemas/SuiParsedSplitCoinResponse"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SuiTransactionResponse": {
        "type": "object",
        "required": [
          "certificate",
          "effects"
        ],
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/CertifiedTransaction"
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          },
          "parsed_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SuiParsedTransactionResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "TransactionBytes": {
        "type": "object",
        "required": [
          "gas",
          "inputObjects",
          "txBytes"
        ],
        "properties": {
          "gas": {
            "description": "the gas object to be used",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "inputObjects": {
            "description": "objects to be used in this transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "txBytes": {
            "description": "transaction data bytes, as base-64 encoded string",
            "allOf": [
              {
                "$ref": "#/components/schemas/Base64"
              }
            ]
          }
        }
      },
      "TransactionData": {
        "type": "object",
        "required": [
          "gasBudget",
          "gasPayment",
          "sender",
          "transactions"
        ],
        "properties": {
          "gasBudget": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gasPayment": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "sender": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionKind"
            }
          }
        }
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "TransactionEffects": {
        "description": "The response from processing a transaction or a certified transaction",
        "type": "object",
        "required": [
          "gasObject",
          "gasUsed",
          "status",
          "transactionDigest"
        ],
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "dependencies": {
            "description": "The set of transaction digests this transaction depends on.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDigest"
            }
          },
          "events": {
            "description": "The events emitted during execution. Note that only successful transactions emit events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "gasObject": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/GasCostSummary"
          },
          "mutated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "sharedObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "transactionDigest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "unwrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "wrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "TransactionEffectsDigest": {
        "$ref": "#/components/schemas/Base64"
      },
      "TransactionKind": {
        "oneOf": [
          {
            "description": "Initiate an object transfer between addresses",
            "type": "object",
            "required": [
              "TransferObject"
            ],
            "properties": {
              "TransferObject": {
                "$ref": "#/components/schemas/TransferObject"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of input coins",
            "type": "object",
            "required": [
              "Pay"
            ],
            "properties": {
              "Pay": {
                "$ref": "#/components/schemas/Pay"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of Sui coins, the input coins are also used to for gas payments.",
            "type": "object",
            "required": [
              "PaySui"
            ],
            "properties": {
              "PaySui": {
                "$ref": "#/components/schemas/PaySui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pay one or more recipients from a set of Sui coins, the input coins are also used to for gas payments.",
            "type": "object",
            "required": [
              "PayAllSui"
            ],
            "properties": {
              "PayAllSui": {
                "$ref": "#/components/schemas/PaySui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publish a new Move module",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/MovePackage"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Call a function in a published Move module",
            "type": "object",
            "required": [
              "Call"
            ],
            "properties": {
              "Call": {
                "$ref": "#/components/schemas/MoveCall"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Initiate a SUI coin transfer between addresses",
            "type": "object",
            "required": [
              "TransferSui"
            ],
            "properties": {
              "TransferSui": {
                "$ref": "#/components/schemas/TransferSui"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A system transaction that will update epoch information on-chain.",
            "type": "object",
            "required": [
              "ChangeEpoch"
            ],
            "properties": {
              "ChangeEpoch": {
                "$ref": "#/components/schemas/SuiChangeEpoch"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransactionQuery": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "All"
            ]
          },
          {
            "type": "object",
            "required": [
              "MoveFunction"
            ],
            "properties": {
              "MoveFunction": {
                "type": "object",
                "required": [
                  "package"
                ],
                "properties": {
                  "function": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "module": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "package": {
                    "$ref": "#/components/schemas/ObjectID"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "InputObject"
            ],
            "properties": {
              "InputObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MutatedObject"
            ],
            "properties": {
              "MutatedObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "FromAddress"
            ],
            "properties": {
              "FromAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ToAddress"
            ],
            "properties": {
              "ToAddress": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransferObject": {
        "type": "object",
        "required": [
          "objectRef",
          "recipient"
        ],
        "properties": {
          "objectRef": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferObjectParams": {
        "type": "object",
        "required": [
          "objectId",
          "recipient"
        ],
        "properties": {
          "objectId": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TransferSui": {
        "type": "object",
        "required": [
          "recipient"
        ],
        "properties": {
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TypeTag": {
        "type": "string"
      }
    }
  }
}
